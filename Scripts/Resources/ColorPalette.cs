using Godot;
using System;
using System.Collections;
using System.Collections.Generic;

[GlobalClass]
public partial class ColorPalette : Resource, IEnumerable<Color>
{
    //I created defaults in here too just to avoid losing the default color codes
    [Export]
    private Color _generalBackgroundColor = new Color("160a27");
    [Export]
    private Color _secondaryBackgroundColor = new Color("1d0e33");
    [Export]
    private Color _wheelPrimaryColor = new Color("4322b1");
    [Export]
    private Color _wheelSecondaryColor = new Color("8827d6");
    [Export]
    private Color _wheelButtonColor = new Color("ffffff");
    [Export]
    private Color _wheelButtonTextColor = new Color("000000");
    [Export]
    private Color _listBackgroundColor = new Color("fff6d2");
    [Export]
    private Color _listFontColor = new Color("ffffff");
    [Export]
    private Color _popupBackgroundColor = new Color("fff6d2");
    [Export]
    private Color _popupFontColor = new Color("532d0d");

    private Color[] _colorsArray = new Color[10];
    private bool colorsReady = false;

    public ColorPalette() { }
    public ColorPalette(ColorPalette clone) 
    {
        clone.ReadyColors();
        clone._colorsArray.CopyTo(_colorsArray, 0); 
    }

    /// <summary>
    /// Confirms the ready state of the internal color array. This is needed when working with ColorPalettes objects generated by the Godot inspector.
    /// </summary>
    public void ReadyColors()
    {
        if(colorsReady) return;
        colorsReady = true;
        _colorsArray =
        [
            _generalBackgroundColor,
            _secondaryBackgroundColor,
            _wheelPrimaryColor,
            _wheelSecondaryColor,
            _wheelButtonColor,
            _wheelButtonTextColor,
            _listBackgroundColor,
            _listFontColor,
            _popupBackgroundColor,
            _popupFontColor
        ];
    }

    //IEnumerable interface requirements (for foreach loops)
    public IEnumerator<Color> GetEnumerator()
    {
        foreach (Color color in _colorsArray) 
        {
            yield return color;
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    //Support indexer
    public Color this[int i] 
    {
        get
        {
            return _colorsArray[i];
        }
        set 
        {
            _colorsArray[i] = value;
        }
    }

    //Set/Get with enum
    public Color GetColor(Colors color)
    {
        return this[(int)color];
    }

    public void SetColor(Colors colorToSet, Color color)
    {
        this[(int)colorToSet] = color;
    }

    public enum Colors 
    {
        Background = 0,
        SecondaryBackground = 1,
        WheelPrimary = 2,
        WheelSecondary = 3,
        WheelButtonColor = 4,
        WheelButtonTextColor = 5,
        ListBackground = 6, 
        ListFont = 7,
        PopupBackground = 8,
        PopupFont = 9,
    }
}
